# -*- coding: utf-8 -*-
#
# Cookbook Name:: elite
# Spec:: x
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require_relative 'spec_helper'

describe 'elite::x' do
  let(:subject) do
    ChefSpec::SoloRunner.new(step_into: %w(elite_x elite_desktop_app),
                             platform: 'debian',
                             version: '8.0') do |node|
      node.override['elite']['users'] = %w(sliim foo)
      node.override['elite']['groups'] = %w(elite)
      node.override['elite']['sliim']['name'] = 'Sliim'
      node.override['elite']['sliim']['email'] = 'sliim@mailoo.org'
      node.override['elite']['sliim']['home'] = '/home/sliim'
      node.override['elite']['sliim']['group'] = 'elite'
      node.override['elite']['sliim']['groups'] = %w(elite)
      node.override['elite']['sliim']['dotfd'] = '/home/sliim/.dotfiles'
      node.override['elite']['sliim']['x']['cookbook'] = 'elite'
      node.override['elite']['sliim']['x']['source'] = 'Xdefaults.erb'
      node.override['elite']['sliim']['x']['config']['urxvt']['transparent'] = false
      node.override['elite']['sliim']['x']['config']['urxvt']['tintColor'] = 'tint-color'
      node.override['elite']['sliim']['x']['config']['urxvt']['shading'] = 42
      node.override['elite']['sliim']['x']['config']['urxvt']['saveLines'] = 1337
      node.override['elite']['sliim']['x']['config']['urxvt']['foreground'] = 'foreground-color'
      node.override['elite']['sliim']['x']['config']['urxvt']['background'] = 'background-color'
      node.override['elite']['sliim']['x']['config']['urxvt']['font'] = 'font'
      node.override['elite']['sliim']['x']['config']['urxvt']['boldFont'] = 'bold-font'
      node.override['elite']['sliim']['x']['config']['urxvt']['boldColors'] = 'off'
      node.override['elite']['sliim']['x']['config']['urxvt']['color4'] = 'color4'
      node.override['elite']['sliim']['x']['config']['urxvt']['color12'] = 'color12'
      node.override['elite']['sliim']['x']['config']['xterm']['foreground'] = 'xterm-fg'
      node.override['elite']['sliim']['x']['config']['xterm']['background'] = 'xterm-bg'
      node.override['elite']['sliim']['x']['config']['dzen2']['font'] = 'font'
      node.override['elite']['sliim']['x']['config']['dzen2']['foreground'] = 'dzen2-fg'
      node.override['elite']['sliim']['x']['config']['dzen2']['background'] = 'dzen2-bg'
    end.converge(described_recipe)
  end

  it 'includes recipe[elite::default]' do
    expect(subject).to include_recipe('elite::default')
  end

  it 'creates elite_x[sliim]' do
    expect(subject).to create_elite_x('sliim')
      .with(cookbook: 'elite')
  end

  it 'installs package[xorg]' do
    expect(subject).to install_package('xorg')
  end

  %w(xterm xsel scrot rxvt-unicode-256color).each do |pkg|
    it "installs package[#{pkg}]" do
      expect(subject).to install_package(pkg)
    end
  end

  it 'creates template[/home/sliim/.dotfiles/Xdefaults]' do
    config_file = '/home/sliim/.dotfiles/Xdefaults'
    matches = [start_with('! Generated by Chef!'),
               /^URxvt.transparent:\s+false$/,
               /^URxvt.tintColor:\s+tint-color$/,
               /^URxvt.shading:\s+42$/,
               /^URxvt.saveLines:\s+1337$/,
               /^URxvt.foreground:\s+foreground-color$/,
               /^URxvt.background:\s+background-color$/,
               /^URxvt.font:\s+font$/,
               /^URxvt.boldFont:\s+bold-font$/,
               /^URxvt.boldColors:\s+off$/,
               /^URxvt.color4:\s+color4$/,
               /^URxvt.color12:\s+color12$/,
               /^XTerm.background:\s+xterm-bg$/,
               /^XTerm.foreground:\s+xterm-fg$/,
               /^dzen2.font:\s+font$/,
               /^dzen2.foreground:\s+dzen2-fg$/,
               /^dzen2.background:\s+dzen2-bg$/]

    expect(subject).to create_template(config_file)
      .with(owner: 'sliim',
            group: 'elite',
            mode: '0640',
            source: 'Xdefaults.erb')

    matches.each do |m|
      expect(subject).to render_file(config_file).with_content(m)
    end
  end

  it 'creates remote_directory[/home/sliim/.dotfiles/urxvt.d]' do
    expect(subject).to create_remote_directory('/home/sliim/.dotfiles/urxvt.d')
      .with(owner: 'sliim',
            group: 'elite',
            mode: '0750',
            files_owner: 'sliim',
            files_group: 'elite',
            files_mode: '0640',
            source: 'urxvt.d')
  end

  it 'creates elite_dotlink[sliim-Xdefaults]' do
    expect(subject).to create_elite_dotlink('sliim-Xdefaults')
      .with(owner: 'sliim',
            file: 'Xdefaults')
  end

  it 'creates elite_dotlink[sliim-urxvt.d]' do
    expect(subject).to create_elite_dotlink('sliim-urxvt.d')
      .with(owner: 'sliim',
            file: 'urxvt.d')
  end

  it 'creates elite_bin[sliim-disable-screensave.sh]' do
    expect(subject).to create_elite_bin('sliim-disable-screensave.sh')
      .with(owner: 'sliim',
            script: 'disable-screensave.sh',
            cookbook: 'elite',
            source_dir: 'bin/')
  end

  it 'creates elite_desktop_app[sliim-urxvt]' do
    expect(subject).to create_elite_desktop_app('sliim-urxvt')
      .with(owner: 'sliim',
            app: 'urxvt',
            cookbook: 'elite',
            source_dir: 'applications/')
  end

  appdir = '/home/sliim/.dotfiles/local/share/applications'

  it "creates directory[#{appdir}]" do
    expect(subject).to create_directory(appdir)
      .with(owner: 'sliim',
            group: 'elite',
            mode: '0750',
            recursive: true)
  end

  it 'creates elite_dotlink[sliim-local]' do
    expect(subject).to create_elite_dotlink('sliim-local')
      .with(skip_if_exists: true,
            owner: 'sliim',
            file: 'local')
  end

  it "creates cookbook_file[#{appdir}/urxvt.desktop]" do
    expect(subject).to create_cookbook_file("#{appdir}/urxvt.desktop")
      .with(owner: 'sliim',
            group: 'elite',
            mode: '0640',
            cookbook: 'elite',
            source: 'applications/urxvt.desktop')
  end
end
