# -*- coding: utf-8 -*-
#
# Cookbook Name:: elite
# Spec:: conky
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require_relative 'spec_helper'

describe 'elite::conky' do
  let(:subject) do
    ChefSpec::SoloRunner.new(step_into: %w(elite_conky elite_conky_rc)) do |node|
      node.override['elite']['users'] = %w(sliim foo)
      node.override['elite']['groups'] = %w(elite)
      node.override['elite']['sliim']['home'] = '/home/sliim'
      node.override['elite']['sliim']['group'] = 'elite'
      node.override['elite']['sliim']['groups'] = %w(elite)
      node.override['elite']['sliim']['dotfd'] = '/home/sliim/.dotfiles'
      node.override['elite']['sliim']['conky'] = {
        'global_config' => {
          'maximum_width' => 400,
          'maximum_height' => 1080,
        },
        'configs' => {
          'test' => {
            'config' => { 'gap_x' => 400 },
          },
        },
      }
    end.converge(described_recipe)
  end

  before do
    stub_data_bag_item(:elite_conky, 'test').and_return(
      'config' => { 'gap_y' => 200 },
      'text' => [
        {
          0 => '${exec whoami}',
          25 => '${uptime}',
          200 => '${time %H}:${time %M}:${time %S}',
        },
        {
          0 => '${loadavg}',
        },
      ])
  end

  it 'includes recipe[elite::dotfiles]' do
    expect(subject).to include_recipe('elite::dotfiles')
  end

  it 'creates elite_conky[sliim]' do
    expect(subject).to create_elite_conky('sliim')
      .with(global_config: {
              'maximum_width' => 400,
              'maximum_height' => 1080,
            },
            configs: { 'test' => { 'config' => { 'gap_x' => 400 } } })
  end

  it 'does not create elite_conky[foo]' do
    expect(subject).to_not create_elite_conky('foo')
  end

  it 'installs package[conky]' do
    expect(subject).to install_package('conky')
  end

  it 'creates directory[/home/sliim/.dotfiles/conky.d]' do
    expect(subject).to create_directory('/home/sliim/.dotfiles/conky.d')
      .with(owner: 'sliim',
            group: 'elite',
            mode: '0750')
  end

  it 'creates elite_dotlink[sliim-conky]' do
    expect(subject).to create_elite_dotlink('sliim-conky')
      .with(owner: 'sliim',
            file: 'conky.d')
  end

  it 'creates directory[/home/sliim/.dotfiles/conky.d/var]' do
    expect(subject).to create_directory('/home/sliim/.dotfiles/conky.d/var')
      .with(owner: 'sliim',
            group: 'elite',
            mode: '0750')
  end

  it 'creates directory[/home/sliim/.dotfiles/conky.d/scripts]' do
    expect(subject).to create_directory('/home/sliim/.dotfiles/conky.d/scripts')
      .with(owner: 'sliim',
            group: 'elite',
            mode: '0750')
  end

  it 'creates elite_conky_rc[sliim-test]' do
    expect(subject).to create_elite_conky_rc('sliim-test')
      .with(owner: 'sliim',
            rc: 'test',
            config: {
              'maximum_width' => 400,
              'maximum_height' => 1080,
              'gap_x' => 400,
            },
            text: [])
  end

  it 'creates template[/home/sliim/.dotfiles/conky.d/test]' do
    config_file = '/home/sliim/.dotfiles/conky.d/test'
    matches = [start_with('# Generated by Chef!'),
               /^maximum_width 400$/,
               /^maximum_height 1080$/,
               /^gap_x 400$/,
               /^gap_y 200$/,
               /^TEXT\n\${goto 0}\${exec whoami}\${goto 25}\${uptime}\${goto 200}\${time %H}:\${time %M}:\${time %S}$/,
               /^\${goto 0}\${loadavg}$/,
              ]

    expect(subject).to create_template(config_file)
      .with(owner: 'sliim',
            group: 'elite',
            mode: '0640',
            source: 'conky.d/rc.erb')

    matches.each do |m|
      expect(subject).to render_file(config_file).with_content(m)
    end
  end
end
