;; Generated by Chef! Do not edit, your changes will be overriden!
;;
;; Cookbook:: elite
;; Template:: stumpwm

(in-package :stumpwm)

(set-prefix-key (kbd "<%= @stumpwm.prefix_key %>"))

<% unless @stumpwm.pre_commands.empty? %>
<% @stumpwm.pre_commands.each do |c| -%>
(run-shell-command "<%= c %>")
<% end -%>
<% end %>
(run-shell-command "xrdb -merge ~/.Xdefaults")
(run-shell-command "feh --bg-scale ~/pics/<%= @stumpwm.wallpaper %>")
(run-shell-command "xsetroot -cursor_name left_ptr")
(run-shell-command "conky -c ~/.conky.d/dzen2| dzen2 -ta r -dock")
<% unless @stumpwm.post_commands.empty? %>
<% @stumpwm.post_commands.each do |c| -%>
(run-shell-command "<%= c %>")
<% end -%>
<% end %>

(setf *colors*
      '("black" "red" "green" "magenta" "blue" "yellow" "cyan" "white"))
(update-color-map (current-screen))

(defmacro utl-set-color (val color)
  "Similar to `set-any-color', but without updating colors."
  `(dolist (s *screen-list*)
     (setf (,val s) (alloc-color s ,color))))

(utl-set-color screen-fg-color "<%= @stumpwm.color['fg'] %>")
(utl-set-color screen-bg-color "<%= @stumpwm.color['bg'] %>")
(utl-set-color screen-focus-color "<%= @stumpwm.color['focus'] %>")
(utl-set-color screen-border-color "<%= @stumpwm.color['border'] %>")
(utl-set-color screen-float-focus-color "<%= @stumpwm.color['float_focus'] %>")
(utl-set-color screen-float-unfocus-color "<%= @stumpwm.color['float_unfocus'] %>")
(update-colors-all-screens)
(setf *grab-pointer-foreground* (lookup-color (current-screen) "<%= @stumpwm.color['grab_pointer_fg'] %>")
      *grab-pointer-background* (lookup-color (current-screen) "<%= @stumpwm.color['grab_pointer_bg'] %>"))

<% unless @stumpwm.config.empty? %>
(setf<% @stumpwm.config.each do |key, value| -%> <%= key %> <%= value %>
<% end -%>)
<% end -%>

(set-font "<%= @stumpwm.font %>")

;; Gnome keyring
(let* ((output (run-shell-command "/usr/bin/gnome-keyring-daemon --start" t))
       (lines (loop :for i = 0 :then (1+ j)
                    :as j = (position #\linefeed output :start i)
                    :collect (subseq output i j)
                    :while j)))
  (dolist (line lines)
    (when (> (length line) 0)
      (let ((env-var (loop :for i = 0 :then (1+ j)
                           :as j = (position #\= line :start i)
                           :collect (subseq line i j)
                           :while j)))

        (sb-posix:setenv (car env-var) (cadr env-var) 1)))))

;; Auto-split
(defun maybe-balance-frames ()
  (when (and (< 1 (length (group-frames (current-group)))) autosplit-enabled)
    (balance-frames)))
(defun autosplit ()
  (when (and (< 1 (length (group-windows (current-group)))) autosplit-enabled)
    (if (< (frame-height (window-frame (current-window)))
           (frame-width (window-frame (current-window))))
        (hsplit)
      (vsplit))
    (next)))
(defun unsplit ()
  (when autosplit-enabled
    (remove-split)))
(defun split-on-new-window (window)
  (autosplit)
  (maybe-balance-frames))
(defun unsplit-on-window-destroy (window)
  (unsplit)
  (maybe-balance-frames))
(defcommand toggle-autosplit () ()
  (if autosplit-enabled
      (progn
        (setq autosplit-enabled nil)
        (message "Autosplit disabled."))
    (progn
      (setq autosplit-enabled t)
      (message "Autosplit enabled."))))
(add-hook *new-window-hook* 'split-on-new-window)
(add-hook *destroy-window-hook* 'unsplit-on-window-destroy)

;; Sources: https://lists.nongnu.org/archive/html/stumpwm-devel/2012-05/msg00026.html
(defvar *browser* "firefox")
(defcommand browser () ()
  "Start browser is already running, in which case focus it."
  (let* ((browser-name (or *browser* "firefox"))
         (browser-class (string-capitalize (file-namestring browser-name))))
    (run-or-raise browser-name `(:class ,browser-class))))

(defcommand url (url) ((:rest "URL"))
  "Open URL in the browser in the current group"
  (check-type url string)
  (let* ((browser-name (or *browser* "firefox")))
    (flet ((run-browser (&rest args)
             (run-prog browser-name :search t :args args :wait nil)))
      (run-browser url))))
(defmacro make-web-jump (name url-prefix)
  `(defcommand ,name (search)
    ((:rest ,(concatenate 'string (symbol-name name) ": ")))
    (let* ((url-prefix ,url-prefix))
      (unless (search "~A" url-prefix)
        (setq url-prefix (concat url-prefix "~A")))
      (url (format nil url-prefix (substitute #\Space #\+ search))))))

;; Web jumps
<% @webjumps.each do |title, url| %>
(make-web-jump <%= title %> "<%= url %>")
<% end %>

;; Modules
<% @modules.each do |m| %>
(load-module "<%= m %>")
<% end %>

;; KBD
(defparameter *shift-map* (make-sparse-keymap))
(define-key *root-map* (kbd "ISO_Level3_Shift") '*shift-map*)
<% @kbd.each do |type, kbd| %>
<% kbd.each do |k, cmd| %>
(define-key <%= type %> (kbd "<%= k %>") "<%= cmd %>")
<% end %>
<% end %>

;; Commands
(defcommand toggle-mouse-focus () ()
  "Toggle between :click, :ignore or :sloppy for mouse-focus-policy."
  (let ((new-value nil))
    (cond
      ((eq *mouse-focus-policy* :click)
       (setf new-value :ignore))
      ((eq *mouse-focus-policy* :ignore)
       (setf new-value :sloppy))
      ((eq *mouse-focus-policy* :sloppy)
       (setf new-value :click)))
    (setf *mouse-focus-policy* new-value)
    (message "*mouse-focus-policy* => ~s" new-value)))

<% @commands.each do |cmd, sh_cmd| %>
(defcommand <%= cmd %> () ()
  "<%= cmd.capitalize %> command."
  (run-shell-command "<%= sh_cmd %>"))

<% end %>

;; Programs
<% @programs.each do |program, config| %>
(defprogram-shortcut <%= program %>
  :key (kbd "<%= config['kbd'] %>")
  :command "<%= config['command'] %>"
  :props '<%= config['props'] %>
  )

<% end %>

;; Sessions
(stumpwm:run-commands "grename elite"
<% @sessions.each do |session, _config| %>
                      "gnew <%= session %>"
<% end %>
<% @sessions_cmds.each do |cmd| %>
                      "<%= cmd %>"
<% end %>
                      )
<% count = 1 %>
<% @sessions.each do |session, config| %>

(defcommand <%= session %>-session () ()
  "<%= config['desc'] %>"
  (stumpwm:run-commands "gselect <%= count+=1 %>")
  (run-or-raise "<%= config['command'] %>" '<%= config['props'] %>))
(define-key *top-map* (kbd "<%= config['kbd'] %>") "<%= session %>-session")
<% end %>
